(window.webpackJsonp=window.webpackJsonp||[]).push([[107],{551:function(s,t,a){"use strict";a.r(t);var n=a(21),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h3",{attrs:{id:"分布式红锁的加锁的lua底层设计原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式红锁的加锁的lua底层设计原理"}},[s._v("#")]),s._v(" 分布式红锁的加锁的lua底层设计原理")]),s._v(" "),a("p",[s._v("提前做2个动作:\n1.先把3台 redis key全部清空（为了不受debug干扰，必须先删除锁）\n127.0.0.1:6379> flushdb\nOK")]),s._v(" "),a("p",[s._v("2.isLock = redLock.tryLock(1000"),a("em",[s._v("5")]),s._v("30, 1000"),a("em",[s._v("60")]),s._v("5*30, TimeUnit.MILLISECONDS);")]),s._v(" "),a("p",[s._v("debug的断点 断在 RedissonLock.tryLockInnerAsync(long leaseTime, TimeUnit unit, long threadId, RedisStrictCommand"),a("T",[s._v(" command)")])],1),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RFuture")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tryLockInnerAsync")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" leaseTime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TimeUnit")]),s._v(" unit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" threadId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RedisStrictCommand")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    internalLockLeaseTime "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" unit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toMillis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("leaseTime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" commandExecutor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("evalWriteAsync")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LongCodec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("INSTANCE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n              "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"if (redis.call('exists', KEYS[1]) == 0) then \"")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//key不存在，说明前面没人拿到锁，太幸运了")]),s._v("\n                  "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"redis.call('hset', KEYS[1], ARGV[2], 1); \"")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//执行hset MY_REDLOCK UUID+threadId 1 的命令")]),s._v("\n                  "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"redis.call('pexpire', KEYS[1], ARGV[1]); \"")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//执行pexpire MY_REDLOCK设置锁的租约时间即过期时间。")]),s._v("\n                  "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"return nil; "')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("                              "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//返回nil,代表我已经拿到锁了")]),s._v("\n              "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"end; "')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n              \n              "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"if (redis.call('hexists', KEYS[1], ARGV[2]) == 1) then \"")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//判断是不是我自己拿到了锁")]),s._v("\n                  "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"redis.call('hincrby', KEYS[1], ARGV[2], 1); \"")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//如果是我自己就能进来，为我自己加1")]),s._v("\n                  "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"redis.call('pexpire', KEYS[1], ARGV[1]); \"")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//再重新设置过期时间")]),s._v("\n                  "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"return nil; "')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("                                       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//返回nil,代表我已经拿到锁了")]),s._v("\n              "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"end; "')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n              "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//为以上if这段代码，提出2个疑问？")]),s._v("\n              "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//1.为什么是我自己（UUID+threadId，hash存在）就能进去？因为我上次已经拿到了锁，所以我就能进来，即重入锁，故红锁也是一个重入锁。")]),s._v("\n              "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//2.为什么我进去后，要给自己加1？这就是重入锁的原理了,要记录锁重入的次数，然后再次return nil，代表再次拿到锁。")]),s._v("\n              \n              "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//返回key的剩余过期时间，前面2个if都是返回nil代表拿锁成功，这里返回剩余过期时间代表了锁已经被别人拿走，")]),s._v("\n              "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//为什么要给剩余时间？就是告诉你锁已经在别人那里了，你按我的是个时间在等待吧")]),s._v("\n              "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"return redis.call('pttl', KEYS[1]);\"")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Collections")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("singletonList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" internalLockLeaseTime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getLockName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("threadId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("p",[s._v("KEYS[1]：Collections."),a("Object",[s._v("singletonList(getName())，为分布式锁的key，即MY_REDLOCK\nARGV[1]：internalLockLeaseTime 为锁的租约时间，即过期时间\nARGV[2]：getLockName(threadId)（4218379f-849d-498f-8c28-56f3fce42f71:52）代表了redis连接id+线程id，\n即UUID+threadId,组成锁的获取者，就是谁拿到了该锁。")])],1)])}),[],!1,null,null,null);t.default=e.exports}}]);