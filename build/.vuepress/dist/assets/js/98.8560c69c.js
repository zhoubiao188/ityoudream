(window.webpackJsonp=window.webpackJsonp||[]).push([[98],{542:function(s,t,e){"use strict";e.r(t);var a=e(21),i=Object(a.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("p",[s._v("###微博个人列表和关注列表的性能瓶颈")]),s._v(" "),e("h4",{attrs:{id:"微博个人和关注列表的性能瓶颈分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#微博个人和关注列表的性能瓶颈分析"}},[s._v("#")]),s._v(" 微博个人和关注列表的性能瓶颈分析")]),s._v(" "),e("p",[s._v("上节课，我们已经实现了2个list对不对，一个是个人list,一个是关注list\n这2个list存在性能的问题，就是这个list无线增长。\n大家想想，每个人有2个list,而这2个list每次发微博都会push到个人和关注list，\n时间久了必定把redis撑爆对不对，那怎么办呢 ？限定list的长度\n给大家看看微博和百度是怎么做到的？\n微博限定20页\n百度搜索限定了76页")]),s._v(" "),e("h4",{attrs:{id:"微博个人和关注列表的性能优化方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#微博个人和关注列表的性能优化方案"}},[s._v("#")]),s._v(" 微博个人和关注列表的性能优化方案")]),s._v(" "),e("p",[s._v("优化方案采用：限定个人和关注list的长度为1000，即，\n发微博的时候，往个人和关注list push完成后，把list的长度剪切为1000，\n具体的技术方案采用list 的ltrim命令来实现。\nLTRIM key start end\n截取队列指定区间的元素,其余元素都删除")]),s._v(" "),e("h4",{attrs:{id:"案例实战-微博个人和关注列表的性能优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#案例实战-微博个人和关注列表的性能优化"}},[s._v("#")]),s._v(" 案例实战:微博个人和关注列表的性能优化")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("//性能优化，截取前1000条\nif(this.redisTemplate.opsForList().size(key)>1000){\n    this.redisTemplate.opsForList().trim(key,0,1000);\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])])])}),[],!1,null,null,null);t.default=i.exports}}]);