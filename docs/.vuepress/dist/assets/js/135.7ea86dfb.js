(window.webpackJsonp=window.webpackJsonp||[]).push([[135],{578:function(s,a,r){"use strict";r.r(a);var n=r(21),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,r=s._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[r("h2",{attrs:{id:"stream消息队列实战"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#stream消息队列实战"}},[s._v("#")]),s._v(" stream消息队列实战")]),s._v(" "),r("h3",{attrs:{id:"订单服务与积分服务的stream消息队列"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#订单服务与积分服务的stream消息队列"}},[s._v("#")]),s._v(" 订单服务与积分服务的stream消息队列")]),s._v(" "),r("h3",{attrs:{id:"为什么要用消息组-它解决了什么问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#为什么要用消息组-它解决了什么问题"}},[s._v("#")]),s._v(" 为什么要用消息组？它解决了什么问题？")]),s._v(" "),r("p",[s._v("用过消息队列的同学应该知道目前比较流行的有RabbitMq、kafka等。\n现在redis5.0 也完美支持消息队列。\n例如 电商的订单，用户下完订单号，就要给用户添加积分 和发 app push消息.\n如图1 以上这张图看上去，表面没有问题，但是部署集群的情况下就有问题了，如图2：")]),s._v(" "),r("p",[s._v("积分服务 和 push服务都部署集群的情况下，我们来演示会出什么问题：")]),s._v(" "),r("p",[s._v("1.订单服务发送3条订单数据")]),s._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[s._v('39.100.196.99:6379> multi\nOK\n(1.07s)\n39.100.196.99:6379> xadd ordermq * orderno 10001\nQUEUED\n39.100.196.99:6379> xadd ordermq * orderno 10002\nQUEUED\n(1.94s)\n39.100.196.99:6379> xadd ordermq * orderno 10003\nQUEUED\n39.100.196.99:6379> exec\n1) "1587782682562-0"\n2) "1587782682562-1"\n3) "1587782682562-2"\n')])]),s._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[s._v("1")]),r("br"),r("span",{staticClass:"line-number"},[s._v("2")]),r("br"),r("span",{staticClass:"line-number"},[s._v("3")]),r("br"),r("span",{staticClass:"line-number"},[s._v("4")]),r("br"),r("span",{staticClass:"line-number"},[s._v("5")]),r("br"),r("span",{staticClass:"line-number"},[s._v("6")]),r("br"),r("span",{staticClass:"line-number"},[s._v("7")]),r("br"),r("span",{staticClass:"line-number"},[s._v("8")]),r("br"),r("span",{staticClass:"line-number"},[s._v("9")]),r("br"),r("span",{staticClass:"line-number"},[s._v("10")]),r("br"),r("span",{staticClass:"line-number"},[s._v("11")]),r("br"),r("span",{staticClass:"line-number"},[s._v("12")]),r("br"),r("span",{staticClass:"line-number"},[s._v("13")]),r("br"),r("span",{staticClass:"line-number"},[s._v("14")]),r("br")])]),r("p",[s._v("2.集群中的第一个积分服务消费")]),s._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[s._v('39.100.196.99:6379> xread streams ordermq 0\n1) 1) "ordermq"\n   2) 1) 1) "1587782682562-0"\n         2) 1) "orderno"\n            2) "10001"\n      2) 1) "1587782682562-1"\n         2) 1) "orderno"\n            2) "10002"\n      3) 1) "1587782682562-2"\n         2) 1) "orderno"\n            2) "10003"\n')])]),s._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[s._v("1")]),r("br"),r("span",{staticClass:"line-number"},[s._v("2")]),r("br"),r("span",{staticClass:"line-number"},[s._v("3")]),r("br"),r("span",{staticClass:"line-number"},[s._v("4")]),r("br"),r("span",{staticClass:"line-number"},[s._v("5")]),r("br"),r("span",{staticClass:"line-number"},[s._v("6")]),r("br"),r("span",{staticClass:"line-number"},[s._v("7")]),r("br"),r("span",{staticClass:"line-number"},[s._v("8")]),r("br"),r("span",{staticClass:"line-number"},[s._v("9")]),r("br"),r("span",{staticClass:"line-number"},[s._v("10")]),r("br"),r("span",{staticClass:"line-number"},[s._v("11")]),r("br")])]),r("p",[s._v("3.集群中的第二个积分服务消费")]),s._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[s._v('39.100.196.99:6379> xread streams ordermq 0\n1) 1) "ordermq"\n   2) 1) 1) "1587782682562-0"\n         2) 1) "orderno"\n            2) "10001"\n      2) 1) "1587782682562-1"\n         2) 1) "orderno"\n            2) "10002"\n      3) 1) "1587782682562-2"\n         2) 1) "orderno"\n            2) "10003"\n')])]),s._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[s._v("1")]),r("br"),r("span",{staticClass:"line-number"},[s._v("2")]),r("br"),r("span",{staticClass:"line-number"},[s._v("3")]),r("br"),r("span",{staticClass:"line-number"},[s._v("4")]),r("br"),r("span",{staticClass:"line-number"},[s._v("5")]),r("br"),r("span",{staticClass:"line-number"},[s._v("6")]),r("br"),r("span",{staticClass:"line-number"},[s._v("7")]),r("br"),r("span",{staticClass:"line-number"},[s._v("8")]),r("br"),r("span",{staticClass:"line-number"},[s._v("9")]),r("br"),r("span",{staticClass:"line-number"},[s._v("10")]),r("br"),r("span",{staticClass:"line-number"},[s._v("11")]),r("br")])]),r("p",[s._v("观察以上数据，在集群的环境中，例如积分服务双实例，必然导致消息重复消费的问题。\n为了解决这个问题，redis引入了消费组的概念。\n什么是消息组呢？")]),s._v(" "),r("h3",{attrs:{id:"案例实战-积分服务消息组"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#案例实战-积分服务消息组"}},[s._v("#")]),s._v(" 案例实战：积分服务消息组")]),s._v(" "),r("h3",{attrs:{id:"什么是消息组"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是消息组"}},[s._v("#")]),s._v(" 什么是消息组")]),s._v(" "),r("p",[s._v("如果你用过rabbitmq或 kafka就知道它的作用。\n例如 积分服务在集群环境中部署了2台相同代码，都可以读取redis stream\n如果直接采用xread读取，就会2台都会收到一模一样的数据。\n为了解决，集群环境中，只有一台能消费消息,redis设计了消息组的概念。\n消息组：一个消费组(group)内允许有多个消费者(consumer)（上面的直接执行 XREAD 指令的都是消费者），但是1条消息只会投递到其中一个 consumer上，\n也就是组内每个 consumer 都会收到不同的消息。（这种模式术语叫做 集群模式）")]),s._v(" "),r("h4",{attrs:{id:"步骤1-先创建一个消息队列"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#步骤1-先创建一个消息队列"}},[s._v("#")]),s._v(" 步骤1：先创建一个消息队列")]),s._v(" "),r("p",[s._v("沿用我们的消息队列，上节课的内容，队列名： ordermq")]),s._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[s._v('39.100.196.99:6379> xread streams ordermq 0\n1) 1) "ordermq"\n   2) 1) 1) "1587783541474-0"\n         2) 1) "orderno"\n            2) "10001"\n      2) 1) "1587783541474-1"\n         2) 1) "orderno"\n            2) "10002"\n      3) 1) "1587783541474-2"\n         2) 1) "orderno"\n            2) "10003"\n')])]),s._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[s._v("1")]),r("br"),r("span",{staticClass:"line-number"},[s._v("2")]),r("br"),r("span",{staticClass:"line-number"},[s._v("3")]),r("br"),r("span",{staticClass:"line-number"},[s._v("4")]),r("br"),r("span",{staticClass:"line-number"},[s._v("5")]),r("br"),r("span",{staticClass:"line-number"},[s._v("6")]),r("br"),r("span",{staticClass:"line-number"},[s._v("7")]),r("br"),r("span",{staticClass:"line-number"},[s._v("8")]),r("br"),r("span",{staticClass:"line-number"},[s._v("9")]),r("br"),r("span",{staticClass:"line-number"},[s._v("10")]),r("br"),r("span",{staticClass:"line-number"},[s._v("11")]),r("br")])]),r("h4",{attrs:{id:"步骤2-创建一个消费组"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#步骤2-创建一个消费组"}},[s._v("#")]),s._v(" 步骤2：创建一个消费组")]),s._v(" "),r("p",[s._v("XGROUP命令：")]),s._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[s._v("xgroup [CREATE key groupname id-or-$] [SETID key id-or-$] [DESTROY key groupname] [DELCONSUMER key groupname consumername]\n")])]),s._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[s._v("1")]),r("br")])]),r("p",[s._v("CREATE创建组，SETID更新组起始消息ID，DESTROY销毁组，DELCONSUMER删除组内消费者等操作。")]),s._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[s._v("39.100.196.99:6379> xgroup CREATE ordermq ordergroup 0\nOK\n")])]),s._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[s._v("1")]),r("br"),r("span",{staticClass:"line-number"},[s._v("2")]),r("br")])]),r("p",[s._v("$意思从新消息开始分发，注意因为group是在服务端的结构，所以这里用的词是分发，而不是接收。\n如果是填写id，代表消费，例如 填0，表示该组从第一条消息开始消费。")]),s._v(" "),r("p",[s._v("注意：\n如果ordermq不存在时，会抛出以下异常，代表没要找到stream的key ordermq\nNOGROUP No such key 'ordermq' or consumer group 'ordergroup' in XREADGROUP with GROUP option\n报这种错的解决方案有2种：")]),s._v(" "),r("ol",[r("li",[s._v("先创建先创建一个消息队列  xadd ordermq * orderno 10001")]),s._v(" "),r("li",[s._v("创建一个空流 ：XGROUP CREATE ordermq ordergroup $ MKSTREAM")])]),s._v(" "),r("h4",{attrs:{id:"步骤3-多个消费者消费"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#步骤3-多个消费者消费"}},[s._v("#")]),s._v(" 步骤3：多个消费者消费")]),s._v(" "),r("p",[s._v("XREADGROUP命令")]),s._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[s._v("XREADGROUP GROUP group consumer [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] ID [ID ...]\n")])]),s._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[s._v("1")]),r("br")])]),r("h2",{attrs:{id:"集群环境第一个积分服务进行消费"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#集群环境第一个积分服务进行消费"}},[s._v("#")]),s._v(" 集群环境第一个积分服务进行消费")]),s._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[s._v('39.100.196.99:6379> XREADGROUP GROUP ordergroup consumer-score  COUNT 2 STREAMS ordermq >\n1) 1) "ordermq"\n   2) 1) 1) "1587783541474-0"\n         2) 1) "orderno"\n            2) "10001"\n      2) 1) "1587783541474-1"\n         2) 1) "orderno"\n            2) "10002"\n')])]),s._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[s._v("1")]),r("br"),r("span",{staticClass:"line-number"},[s._v("2")]),r("br"),r("span",{staticClass:"line-number"},[s._v("3")]),r("br"),r("span",{staticClass:"line-number"},[s._v("4")]),r("br"),r("span",{staticClass:"line-number"},[s._v("5")]),r("br"),r("span",{staticClass:"line-number"},[s._v("6")]),r("br"),r("span",{staticClass:"line-number"},[s._v("7")]),r("br"),r("span",{staticClass:"line-number"},[s._v("8")]),r("br")])]),r("h2",{attrs:{id:"集群环境第二个积分服务进行消费"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#集群环境第二个积分服务进行消费"}},[s._v("#")]),s._v(" 集群环境第二个积分服务进行消费")]),s._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[s._v('39.100.196.99:6379> XREADGROUP GROUP ordergroup consumer-score  COUNT 2 STREAMS ordermq >\n1) 1) "ordermq"\n   2) 1) 1) "1587783541474-2"\n         2) 1) "orderno"\n            2) "10003"\n')])]),s._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[s._v("1")]),r("br"),r("span",{staticClass:"line-number"},[s._v("2")]),r("br"),r("span",{staticClass:"line-number"},[s._v("3")]),r("br"),r("span",{staticClass:"line-number"},[s._v("4")]),r("br"),r("span",{staticClass:"line-number"},[s._v("5")]),r("br")])]),r("p",[s._v("语法说明：\nXREADGROUP group ordergroup consumer-score count 2 streams ordermq >\n消费者consumer-score,进入组ordergroup内，消费ordermq的数据\n参数>表示未被组内消费的起始消息\n参数count 2表示获取2条")]),s._v(" "),r("p",[s._v("组内消费的基本原理\nSTREAM类型会为每个组记录一个最后处理（交付）的消息ID（last_delivered_id），\n这样在组内消费时，就可以从这个值后面开始读取，保证不重复消费。")])])}),[],!1,null,null,null);a.default=e.exports}}]);