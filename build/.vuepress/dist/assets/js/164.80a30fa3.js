(window.webpackJsonp=window.webpackJsonp||[]).push([[164],{608:function(t,a,s){"use strict";s.r(a);var i=s(21),v=Object(i.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("springboot安全:接口攻击")]),t._v(" "),s("h3",{attrs:{id:"本课程目标"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本课程目标"}},[t._v("#")]),t._v(" 本课程目标：")]),t._v(" "),s("p",[t._v("面试的时候经常会被问到，如何保证你的接口完全？接口安全最常见的做法就是篡改和重放。"),s("br"),t._v("\n故，本节课我们就来学习：")]),t._v(" "),s("ol",[s("li",[t._v("什么是接口篡改攻击？")]),t._v(" "),s("li",[t._v("什么是重放攻击？")]),t._v(" "),s("li",[t._v("编码实现SpringBoot的签名保护，防篡改重放攻击")])]),t._v(" "),s("h3",{attrs:{id:"一、为什么api接口是不安全的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、为什么api接口是不安全的"}},[t._v("#")]),t._v(" 一、为什么API接口是不安全的？")]),t._v(" "),s("p",[t._v("对于互联网来说，只要你系统的接口暴露在外网，就避免不了接口安全问题。\n如果你的接口在外网裸奔，只要让黑客知道接口的地址和参数就可以调用，那简直就是灾难。\n"),s("br"),t._v("举个例子：你的网站用户注册的时候，需要填写手机号，发送手机验证码，如果这个发送验证码的接口没有经过特殊安全处理，那这个短信接口早就被人盗刷不知道浪费了多少钱了。")]),t._v(" "),s("h3",{attrs:{id:"二、看看淘宝的api接口安全是怎么做的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、看看淘宝的api接口安全是怎么做的"}},[t._v("#")]),t._v(" 二、看看淘宝的API接口安全是怎么做的？")]),t._v(" "),s("p",[t._v("浏览器输入：https://h5.m.taobao.com/\n然后过滤带有sign的URL")]),t._v(" "),s("p",[s("img",{attrs:{src:"/sb/jiami1.png",alt:"image"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"/sb/jiami2.png",alt:"image"}})]),t._v(" "),s("p",[t._v("从上图可以看出，淘宝的接口统一加了t 和 sign 来实现接口安全的，先别急，接下来我们会一一讲解这2个参数的原理。")]),t._v(" "),s("h3",{attrs:{id:"三、什么是接口篡改攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、什么是接口篡改攻击"}},[t._v("#")]),t._v(" 三、什么是接口篡改攻击？")]),t._v(" "),s("p",[t._v("接口篡改是指黑客通过http捉包的形式获取了你api接口的请求参数，然后篡改api参数内容，重新发送api请求。\n例如上文说的，黑客通过http捉包破解了你的手机发送验证码接口，然后篡改手机号码，最终盗刷短信，浪费你的钱财。")]),t._v(" "),s("h3",{attrs:{id:"四、接口如何实现请求内容防止篡改"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、接口如何实现请求内容防止篡改"}},[t._v("#")]),t._v(" 四、接口如何实现请求内容防止篡改？")]),t._v(" "),s("p",[t._v("一般的做法有2种：")]),t._v(" "),s("ol",[s("li",[t._v("采用https方式把接口的数据进行加密传输，即便是被黑客破解，黑客也花费大量的时间和精力去破解。")]),t._v(" "),s("li",[t._v("接口后台对接口的请求参数进行验证，防止被黑客篡改；原理如下：")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/sb/jiami4.png",alt:"image"}})]),t._v(" "),s("ul",[s("li",[t._v("步骤1：服务端和客户端约定好加密规则，然后彼此都对api接口参数进行加密。")]),t._v(" "),s("li",[t._v("步骤2：客户端按步骤1，对api传输参数进行加密后得到签名值sign1,并将sign1,发送给服务端。")]),t._v(" "),s("li",[t._v("步骤3：服务端接收到客户端的请求后，按步骤1对请求参数进行加密，得到签名值sign2.")]),t._v(" "),s("li",[t._v("步骤4：服务端比对sign1和sign2的值，如果不一致，就认定为被篡改，非法请求。")])]),t._v(" "),s("p",[t._v("以上2种方式，互联网公司都是同时采用的，例如淘宝。")]),t._v(" "),s("h3",{attrs:{id:"五、什么是重放攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、什么是重放攻击"}},[t._v("#")]),t._v(" 五、什么是重放攻击？")]),t._v(" "),s("p",[t._v("重放攻击说白了就是黑客通过http捉包的形式，获取了你接口的请求参数（没篡改内容），然后重复发送请求。\n重复攻击会造成2种严重后果：")]),t._v(" "),s("ol",[s("li",[t._v("针对插入数据库接口：重放攻击，会出现大量重复数据，甚至垃圾数据会把数据库撑爆。")]),t._v(" "),s("li",[t._v("针对查询的接口：黑客一般是重点攻击慢查询接口，例如一个慢查询接口1s，只要黑客发起重放攻击，就必然造成系统被拖垮，数据库查询被阻塞死。")])]),t._v(" "),s("h3",{attrs:{id:"六、接口如何实现请求内容防止重放"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#六、接口如何实现请求内容防止重放"}},[t._v("#")]),t._v(" 六、接口如何实现请求内容防止重放？")]),t._v(" "),s("p",[t._v("业界的做法通常是基于timestamp的方案(淘宝也是这种方案)来防止重放。\n原理如下：\n"),s("img",{attrs:{src:"/sb/jiami5.png",alt:"image"}})]),t._v(" "),s("ul",[s("li",[t._v("步骤1：客户端每次发起http请求，而外新增timestamp参数，一起发生给服务端。")]),t._v(" "),s("li",[t._v("步骤2：服务端接收到http请求后，判断timestamp时间戳与当前时间是否操过60s（过期时间根据业务情况设置）,如果超过了就提示签名过期。")])]),t._v(" "),s("p",[t._v("也许有的同学会问，黑客每次请求完后再修改timestamp时间戳，不就破解你这个防止重放算法了吗")]),t._v(" "),s("p",[s("img",{attrs:{src:"/sb/jiami6.png",alt:"image"}}),t._v("\n这确实，能被破解，那如何防止呢？ 大家想一想，黑客修改我们的timestamp，是不是就是上文说的接口篡改，\n所以采用上文的知识点，把timestamp和api参数一起进行加密后得到签名值sign1,并将sign1,发送给服务端；服务端再做验证就解决问题了。")])])}),[],!1,null,null,null);a.default=v.exports}}]);